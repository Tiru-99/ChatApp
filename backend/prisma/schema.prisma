// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  username    String           @unique
  email       String           @unique
  password    String
  profile_pic String?
  messages    Message[]
  chats       ChatModelUsers[]
}

model Message {
  id        String      @id @default(uuid())
  type      MessageType
  content   String?
  imageUrl  String? 
  createdAt DateTime    @default(now())
  senderId  String
  chatId    String
  user      User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat      ChatModel   @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ChatModel {
  id                     String           @id @default(uuid())
  name                   String?
  isGroup                Boolean
  latestMessage          String?
  latestMessageCreatedAt DateTime         @default(now())
  users                  ChatModelUsers[]
  messages               Message[]
  createdAt              DateTime         @default(now())
}

model ChatModelUsers {
  userId String
  chatId String
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat   ChatModel @relation(fields: [chatId], references: [id], onDelete: Cascade)
  //to the same chat 

  @@id([userId, chatId]) // Composite Primary Key for many-to-many  ensures that user cannot be readded 
}

enum MessageType {
  IMAGE
  TEXT
}
